Applying Design Patterns
Venkat Subramaniam
venkats@agiledeveloper.com
@venkat_s  

Part 1: Design and design patterns:
-What are design patterns?
-Why are they exciting and useful?
-What are some of the caveats of using design patterns?
-How to identify patterns that may be used?
-Design Principles and relationship to design patterns
-Patterns across languages
  -C++
  -Java/C# (Reflection, Runtime Type Identification)
  -Languages with Lambda expressions
-Classifications: creational (OCP), structural (DIP, LSP), behavioral (DIP)
 -OCP: Open Closed Principle
 -DIP: Dependency Inversion Principle
 -LSP: Liskov's Substitution Principle
-Scope: What is the predominant approach - inheritance vs composition or delegation
  -class based - inheritance plays the vital role
  -object based - composition or delegation plays a vital role
-lab

Part 2: Some Creational Patterns:
-Abstract Factory
-Builder
-Factor Method
-Difference between Abstract Factor and Factor Method
-Singleton
-lab

Part 3: Some Structural and Behavioral Patterns:
-Adaptor Pattern
-Composite Pattern
-Decorator Pattern
-Strategy Pattern
-what is one difference between strategy and decorator?
  Strategy allows us to vary the guts whereas decorator allows to vary the skin
-lab

Part 4: From OO to Functional Implementation:
-Influence of Lambda Expressions
-Iterator pattern
 -External Iterators
 -Internal Iterators
 -Objective
 -Principle - DIP
-Strategy pattern
  -Objective
  -Principle
  -traditional approach
  -lightweight approach
-lab

Part 5: Using Functional Composition:
-Decorator pattern
  -Objective
  -Principle
  -Combining Functions - functional composition
  -Using functional composition for decorator pattern
-lab

Part 6: Wrapping around Functions:
-Cascade Method Pattern
  -Creating Fluent interfaces
-Execute Around Method Pattern
-lab

Discussions:
-discussions
